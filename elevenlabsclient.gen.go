// Package elevenlabs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package elevenlabs

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetGeneratedItemsV1HistoryGet request
	GetGeneratedItemsV1HistoryGet(ctx context.Context, params *GetGeneratedItemsV1HistoryGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadHistoryItemsV1HistoryDownloadPost request with any body
	DownloadHistoryItemsV1HistoryDownloadPostWithBody(ctx context.Context, params *DownloadHistoryItemsV1HistoryDownloadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DownloadHistoryItemsV1HistoryDownloadPost(ctx context.Context, params *DownloadHistoryItemsV1HistoryDownloadPostParams, body DownloadHistoryItemsV1HistoryDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHistoryItemV1HistoryHistoryItemIdDelete request
	DeleteHistoryItemV1HistoryHistoryItemIdDelete(ctx context.Context, historyItemId string, params *DeleteHistoryItemV1HistoryHistoryItemIdDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHistoryItemByIDV1HistoryHistoryItemIdGet request
	GetHistoryItemByIDV1HistoryHistoryItemIdGet(ctx context.Context, historyItemId string, params *GetHistoryItemByIDV1HistoryHistoryItemIdGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet request
	GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet(ctx context.Context, historyItemId string, params *GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModelsV1ModelsGet request
	GetModelsV1ModelsGet(ctx context.Context, params *GetModelsV1ModelsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TextToSpeechV1TextToSpeechVoiceIdPost request with any body
	TextToSpeechV1TextToSpeechVoiceIdPostWithBody(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TextToSpeechV1TextToSpeechVoiceIdPost(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdPostParams, body TextToSpeechV1TextToSpeechVoiceIdPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TextToSpeechV1TextToSpeechVoiceIdStreamPost request with any body
	TextToSpeechV1TextToSpeechVoiceIdStreamPostWithBody(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdStreamPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TextToSpeechV1TextToSpeechVoiceIdStreamPost(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdStreamPostParams, body TextToSpeechV1TextToSpeechVoiceIdStreamPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserInfoV1UserGet request
	GetUserInfoV1UserGet(ctx context.Context, params *GetUserInfoV1UserGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSubscriptionInfoV1UserSubscriptionGet request
	GetUserSubscriptionInfoV1UserSubscriptionGet(ctx context.Context, params *GetUserSubscriptionInfoV1UserSubscriptionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVoicesV1VoicesGet request
	GetVoicesV1VoicesGet(ctx context.Context, params *GetVoicesV1VoicesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddVoiceV1VoicesAddPost request with any body
	AddVoiceV1VoicesAddPostWithBody(ctx context.Context, params *AddVoiceV1VoicesAddPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultVoiceSettingsV1VoicesSettingsDefaultGet request
	GetDefaultVoiceSettingsV1VoicesSettingsDefaultGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVoiceV1VoicesVoiceIdDelete request
	DeleteVoiceV1VoicesVoiceIdDelete(ctx context.Context, voiceId string, params *DeleteVoiceV1VoicesVoiceIdDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVoiceV1VoicesVoiceIdGet request
	GetVoiceV1VoicesVoiceIdGet(ctx context.Context, voiceId string, params *GetVoiceV1VoicesVoiceIdGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditVoiceV1VoicesVoiceIdEditPost request with any body
	EditVoiceV1VoicesVoiceIdEditPostWithBody(ctx context.Context, voiceId string, params *EditVoiceV1VoicesVoiceIdEditPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSampleV1VoicesVoiceIdSamplesSampleIdDelete request
	DeleteSampleV1VoicesVoiceIdSamplesSampleIdDelete(ctx context.Context, voiceId string, sampleId string, params *DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet request
	GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet(ctx context.Context, voiceId string, sampleId string, params *GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVoiceSettingsV1VoicesVoiceIdSettingsGet request
	GetVoiceSettingsV1VoicesVoiceIdSettingsGet(ctx context.Context, voiceId string, params *GetVoiceSettingsV1VoicesVoiceIdSettingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditVoiceSettingsV1VoicesVoiceIdSettingsEditPost request with any body
	EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostWithBody(ctx context.Context, voiceId string, params *EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditVoiceSettingsV1VoicesVoiceIdSettingsEditPost(ctx context.Context, voiceId string, params *EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostParams, body EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetGeneratedItemsV1HistoryGet(ctx context.Context, params *GetGeneratedItemsV1HistoryGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeneratedItemsV1HistoryGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadHistoryItemsV1HistoryDownloadPostWithBody(ctx context.Context, params *DownloadHistoryItemsV1HistoryDownloadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadHistoryItemsV1HistoryDownloadPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadHistoryItemsV1HistoryDownloadPost(ctx context.Context, params *DownloadHistoryItemsV1HistoryDownloadPostParams, body DownloadHistoryItemsV1HistoryDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadHistoryItemsV1HistoryDownloadPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHistoryItemV1HistoryHistoryItemIdDelete(ctx context.Context, historyItemId string, params *DeleteHistoryItemV1HistoryHistoryItemIdDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHistoryItemV1HistoryHistoryItemIdDeleteRequest(c.Server, historyItemId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHistoryItemByIDV1HistoryHistoryItemIdGet(ctx context.Context, historyItemId string, params *GetHistoryItemByIDV1HistoryHistoryItemIdGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHistoryItemByIDV1HistoryHistoryItemIdGetRequest(c.Server, historyItemId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet(ctx context.Context, historyItemId string, params *GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetRequest(c.Server, historyItemId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModelsV1ModelsGet(ctx context.Context, params *GetModelsV1ModelsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModelsV1ModelsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TextToSpeechV1TextToSpeechVoiceIdPostWithBody(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTextToSpeechV1TextToSpeechVoiceIdPostRequestWithBody(c.Server, voiceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TextToSpeechV1TextToSpeechVoiceIdPost(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdPostParams, body TextToSpeechV1TextToSpeechVoiceIdPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTextToSpeechV1TextToSpeechVoiceIdPostRequest(c.Server, voiceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TextToSpeechV1TextToSpeechVoiceIdStreamPostWithBody(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdStreamPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTextToSpeechV1TextToSpeechVoiceIdStreamPostRequestWithBody(c.Server, voiceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TextToSpeechV1TextToSpeechVoiceIdStreamPost(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdStreamPostParams, body TextToSpeechV1TextToSpeechVoiceIdStreamPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTextToSpeechV1TextToSpeechVoiceIdStreamPostRequest(c.Server, voiceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserInfoV1UserGet(ctx context.Context, params *GetUserInfoV1UserGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInfoV1UserGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSubscriptionInfoV1UserSubscriptionGet(ctx context.Context, params *GetUserSubscriptionInfoV1UserSubscriptionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSubscriptionInfoV1UserSubscriptionGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVoicesV1VoicesGet(ctx context.Context, params *GetVoicesV1VoicesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVoicesV1VoicesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVoiceV1VoicesAddPostWithBody(ctx context.Context, params *AddVoiceV1VoicesAddPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVoiceV1VoicesAddPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultVoiceSettingsV1VoicesSettingsDefaultGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultVoiceSettingsV1VoicesSettingsDefaultGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVoiceV1VoicesVoiceIdDelete(ctx context.Context, voiceId string, params *DeleteVoiceV1VoicesVoiceIdDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVoiceV1VoicesVoiceIdDeleteRequest(c.Server, voiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVoiceV1VoicesVoiceIdGet(ctx context.Context, voiceId string, params *GetVoiceV1VoicesVoiceIdGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVoiceV1VoicesVoiceIdGetRequest(c.Server, voiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditVoiceV1VoicesVoiceIdEditPostWithBody(ctx context.Context, voiceId string, params *EditVoiceV1VoicesVoiceIdEditPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditVoiceV1VoicesVoiceIdEditPostRequestWithBody(c.Server, voiceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSampleV1VoicesVoiceIdSamplesSampleIdDelete(ctx context.Context, voiceId string, sampleId string, params *DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteRequest(c.Server, voiceId, sampleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet(ctx context.Context, voiceId string, sampleId string, params *GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetRequest(c.Server, voiceId, sampleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVoiceSettingsV1VoicesVoiceIdSettingsGet(ctx context.Context, voiceId string, params *GetVoiceSettingsV1VoicesVoiceIdSettingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVoiceSettingsV1VoicesVoiceIdSettingsGetRequest(c.Server, voiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostWithBody(ctx context.Context, voiceId string, params *EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequestWithBody(c.Server, voiceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditVoiceSettingsV1VoicesVoiceIdSettingsEditPost(ctx context.Context, voiceId string, params *EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostParams, body EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequest(c.Server, voiceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetGeneratedItemsV1HistoryGetRequest generates requests for GetGeneratedItemsV1HistoryGet
func NewGetGeneratedItemsV1HistoryGetRequest(server string, params *GetGeneratedItemsV1HistoryGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartAfterHistoryItemId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_after_history_item_id", runtime.ParamLocationQuery, *params.StartAfterHistoryItemId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewDownloadHistoryItemsV1HistoryDownloadPostRequest calls the generic DownloadHistoryItemsV1HistoryDownloadPost builder with application/json body
func NewDownloadHistoryItemsV1HistoryDownloadPostRequest(server string, params *DownloadHistoryItemsV1HistoryDownloadPostParams, body DownloadHistoryItemsV1HistoryDownloadPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDownloadHistoryItemsV1HistoryDownloadPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDownloadHistoryItemsV1HistoryDownloadPostRequestWithBody generates requests for DownloadHistoryItemsV1HistoryDownloadPost with any type of body
func NewDownloadHistoryItemsV1HistoryDownloadPostRequestWithBody(server string, params *DownloadHistoryItemsV1HistoryDownloadPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/history/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewDeleteHistoryItemV1HistoryHistoryItemIdDeleteRequest generates requests for DeleteHistoryItemV1HistoryHistoryItemIdDelete
func NewDeleteHistoryItemV1HistoryHistoryItemIdDeleteRequest(server string, historyItemId string, params *DeleteHistoryItemV1HistoryHistoryItemIdDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "history_item_id", runtime.ParamLocationPath, historyItemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/history/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewGetHistoryItemByIDV1HistoryHistoryItemIdGetRequest generates requests for GetHistoryItemByIDV1HistoryHistoryItemIdGet
func NewGetHistoryItemByIDV1HistoryHistoryItemIdGetRequest(server string, historyItemId string, params *GetHistoryItemByIDV1HistoryHistoryItemIdGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "history_item_id", runtime.ParamLocationPath, historyItemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/history/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetRequest generates requests for GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet
func NewGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetRequest(server string, historyItemId string, params *GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "history_item_id", runtime.ParamLocationPath, historyItemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/history/%s/audio", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewGetModelsV1ModelsGetRequest generates requests for GetModelsV1ModelsGet
func NewGetModelsV1ModelsGetRequest(server string, params *GetModelsV1ModelsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewTextToSpeechV1TextToSpeechVoiceIdPostRequest calls the generic TextToSpeechV1TextToSpeechVoiceIdPost builder with application/json body
func NewTextToSpeechV1TextToSpeechVoiceIdPostRequest(server string, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdPostParams, body TextToSpeechV1TextToSpeechVoiceIdPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTextToSpeechV1TextToSpeechVoiceIdPostRequestWithBody(server, voiceId, params, "application/json", bodyReader)
}

// NewTextToSpeechV1TextToSpeechVoiceIdPostRequestWithBody generates requests for TextToSpeechV1TextToSpeechVoiceIdPost with any type of body
func NewTextToSpeechV1TextToSpeechVoiceIdPostRequestWithBody(server string, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voice_id", runtime.ParamLocationPath, voiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/text-to-speech/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OptimizeStreamingLatency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "optimize_streaming_latency", runtime.ParamLocationQuery, *params.OptimizeStreamingLatency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewTextToSpeechV1TextToSpeechVoiceIdStreamPostRequest calls the generic TextToSpeechV1TextToSpeechVoiceIdStreamPost builder with application/json body
func NewTextToSpeechV1TextToSpeechVoiceIdStreamPostRequest(server string, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdStreamPostParams, body TextToSpeechV1TextToSpeechVoiceIdStreamPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTextToSpeechV1TextToSpeechVoiceIdStreamPostRequestWithBody(server, voiceId, params, "application/json", bodyReader)
}

// NewTextToSpeechV1TextToSpeechVoiceIdStreamPostRequestWithBody generates requests for TextToSpeechV1TextToSpeechVoiceIdStreamPost with any type of body
func NewTextToSpeechV1TextToSpeechVoiceIdStreamPostRequestWithBody(server string, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdStreamPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voice_id", runtime.ParamLocationPath, voiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/text-to-speech/%s/stream", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OptimizeStreamingLatency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "optimize_streaming_latency", runtime.ParamLocationQuery, *params.OptimizeStreamingLatency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewGetUserInfoV1UserGetRequest generates requests for GetUserInfoV1UserGet
func NewGetUserInfoV1UserGetRequest(server string, params *GetUserInfoV1UserGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewGetUserSubscriptionInfoV1UserSubscriptionGetRequest generates requests for GetUserSubscriptionInfoV1UserSubscriptionGet
func NewGetUserSubscriptionInfoV1UserSubscriptionGetRequest(server string, params *GetUserSubscriptionInfoV1UserSubscriptionGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/subscription")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewGetVoicesV1VoicesGetRequest generates requests for GetVoicesV1VoicesGet
func NewGetVoicesV1VoicesGetRequest(server string, params *GetVoicesV1VoicesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewAddVoiceV1VoicesAddPostRequestWithBody generates requests for AddVoiceV1VoicesAddPost with any type of body
func NewAddVoiceV1VoicesAddPostRequestWithBody(server string, params *AddVoiceV1VoicesAddPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voices/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewGetDefaultVoiceSettingsV1VoicesSettingsDefaultGetRequest generates requests for GetDefaultVoiceSettingsV1VoicesSettingsDefaultGet
func NewGetDefaultVoiceSettingsV1VoicesSettingsDefaultGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voices/settings/default")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteVoiceV1VoicesVoiceIdDeleteRequest generates requests for DeleteVoiceV1VoicesVoiceIdDelete
func NewDeleteVoiceV1VoicesVoiceIdDeleteRequest(server string, voiceId string, params *DeleteVoiceV1VoicesVoiceIdDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voice_id", runtime.ParamLocationPath, voiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewGetVoiceV1VoicesVoiceIdGetRequest generates requests for GetVoiceV1VoicesVoiceIdGet
func NewGetVoiceV1VoicesVoiceIdGetRequest(server string, voiceId string, params *GetVoiceV1VoicesVoiceIdGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voice_id", runtime.ParamLocationPath, voiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithSettings != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_settings", runtime.ParamLocationQuery, *params.WithSettings); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewEditVoiceV1VoicesVoiceIdEditPostRequestWithBody generates requests for EditVoiceV1VoicesVoiceIdEditPost with any type of body
func NewEditVoiceV1VoicesVoiceIdEditPostRequestWithBody(server string, voiceId string, params *EditVoiceV1VoicesVoiceIdEditPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voice_id", runtime.ParamLocationPath, voiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voices/%s/edit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteRequest generates requests for DeleteSampleV1VoicesVoiceIdSamplesSampleIdDelete
func NewDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteRequest(server string, voiceId string, sampleId string, params *DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voice_id", runtime.ParamLocationPath, voiceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sample_id", runtime.ParamLocationPath, sampleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voices/%s/samples/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetRequest generates requests for GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet
func NewGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetRequest(server string, voiceId string, sampleId string, params *GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voice_id", runtime.ParamLocationPath, voiceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sample_id", runtime.ParamLocationPath, sampleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voices/%s/samples/%s/audio", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewGetVoiceSettingsV1VoicesVoiceIdSettingsGetRequest generates requests for GetVoiceSettingsV1VoicesVoiceIdSettingsGet
func NewGetVoiceSettingsV1VoicesVoiceIdSettingsGetRequest(server string, voiceId string, params *GetVoiceSettingsV1VoicesVoiceIdSettingsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voice_id", runtime.ParamLocationPath, voiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voices/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

// NewEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequest calls the generic EditVoiceSettingsV1VoicesVoiceIdSettingsEditPost builder with application/json body
func NewEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequest(server string, voiceId string, params *EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostParams, body EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequestWithBody(server, voiceId, params, "application/json", bodyReader)
}

// NewEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequestWithBody generates requests for EditVoiceSettingsV1VoicesVoiceIdSettingsEditPost with any type of body
func NewEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostRequestWithBody(server string, voiceId string, params *EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voice_id", runtime.ParamLocationPath, voiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voices/%s/settings/edit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XiApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "xi-api-key", runtime.ParamLocationHeader, *params.XiApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("xi-api-key", headerParam0)
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetGeneratedItemsV1HistoryGet request
	GetGeneratedItemsV1HistoryGetWithResponse(ctx context.Context, params *GetGeneratedItemsV1HistoryGetParams, reqEditors ...RequestEditorFn) (*GetGeneratedItemsV1HistoryGetResponse, error)

	// DownloadHistoryItemsV1HistoryDownloadPost request with any body
	DownloadHistoryItemsV1HistoryDownloadPostWithBodyWithResponse(ctx context.Context, params *DownloadHistoryItemsV1HistoryDownloadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DownloadHistoryItemsV1HistoryDownloadPostResponse, error)

	DownloadHistoryItemsV1HistoryDownloadPostWithResponse(ctx context.Context, params *DownloadHistoryItemsV1HistoryDownloadPostParams, body DownloadHistoryItemsV1HistoryDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*DownloadHistoryItemsV1HistoryDownloadPostResponse, error)

	// DeleteHistoryItemV1HistoryHistoryItemIdDelete request
	DeleteHistoryItemV1HistoryHistoryItemIdDeleteWithResponse(ctx context.Context, historyItemId string, params *DeleteHistoryItemV1HistoryHistoryItemIdDeleteParams, reqEditors ...RequestEditorFn) (*DeleteHistoryItemV1HistoryHistoryItemIdDeleteResponse, error)

	// GetHistoryItemByIDV1HistoryHistoryItemIdGet request
	GetHistoryItemByIDV1HistoryHistoryItemIdGetWithResponse(ctx context.Context, historyItemId string, params *GetHistoryItemByIDV1HistoryHistoryItemIdGetParams, reqEditors ...RequestEditorFn) (*GetHistoryItemByIDV1HistoryHistoryItemIdGetResponse, error)

	// GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet request
	GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetWithResponse(ctx context.Context, historyItemId string, params *GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetParams, reqEditors ...RequestEditorFn) (*GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse, error)

	// GetModelsV1ModelsGet request
	GetModelsV1ModelsGetWithResponse(ctx context.Context, params *GetModelsV1ModelsGetParams, reqEditors ...RequestEditorFn) (*GetModelsV1ModelsGetResponse, error)

	// TextToSpeechV1TextToSpeechVoiceIdPost request with any body
	TextToSpeechV1TextToSpeechVoiceIdPostWithBodyWithResponse(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TextToSpeechV1TextToSpeechVoiceIdPostResponse, error)

	TextToSpeechV1TextToSpeechVoiceIdPostWithResponse(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdPostParams, body TextToSpeechV1TextToSpeechVoiceIdPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TextToSpeechV1TextToSpeechVoiceIdPostResponse, error)

	// TextToSpeechV1TextToSpeechVoiceIdStreamPost request with any body
	TextToSpeechV1TextToSpeechVoiceIdStreamPostWithBodyWithResponse(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdStreamPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TextToSpeechV1TextToSpeechVoiceIdStreamPostResponse, error)

	TextToSpeechV1TextToSpeechVoiceIdStreamPostWithResponse(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdStreamPostParams, body TextToSpeechV1TextToSpeechVoiceIdStreamPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TextToSpeechV1TextToSpeechVoiceIdStreamPostResponse, error)

	// GetUserInfoV1UserGet request
	GetUserInfoV1UserGetWithResponse(ctx context.Context, params *GetUserInfoV1UserGetParams, reqEditors ...RequestEditorFn) (*GetUserInfoV1UserGetResponse, error)

	// GetUserSubscriptionInfoV1UserSubscriptionGet request
	GetUserSubscriptionInfoV1UserSubscriptionGetWithResponse(ctx context.Context, params *GetUserSubscriptionInfoV1UserSubscriptionGetParams, reqEditors ...RequestEditorFn) (*GetUserSubscriptionInfoV1UserSubscriptionGetResponse, error)

	// GetVoicesV1VoicesGet request
	GetVoicesV1VoicesGetWithResponse(ctx context.Context, params *GetVoicesV1VoicesGetParams, reqEditors ...RequestEditorFn) (*GetVoicesV1VoicesGetResponse, error)

	// AddVoiceV1VoicesAddPost request with any body
	AddVoiceV1VoicesAddPostWithBodyWithResponse(ctx context.Context, params *AddVoiceV1VoicesAddPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVoiceV1VoicesAddPostResponse, error)

	// GetDefaultVoiceSettingsV1VoicesSettingsDefaultGet request
	GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetResponse, error)

	// DeleteVoiceV1VoicesVoiceIdDelete request
	DeleteVoiceV1VoicesVoiceIdDeleteWithResponse(ctx context.Context, voiceId string, params *DeleteVoiceV1VoicesVoiceIdDeleteParams, reqEditors ...RequestEditorFn) (*DeleteVoiceV1VoicesVoiceIdDeleteResponse, error)

	// GetVoiceV1VoicesVoiceIdGet request
	GetVoiceV1VoicesVoiceIdGetWithResponse(ctx context.Context, voiceId string, params *GetVoiceV1VoicesVoiceIdGetParams, reqEditors ...RequestEditorFn) (*GetVoiceV1VoicesVoiceIdGetResponse, error)

	// EditVoiceV1VoicesVoiceIdEditPost request with any body
	EditVoiceV1VoicesVoiceIdEditPostWithBodyWithResponse(ctx context.Context, voiceId string, params *EditVoiceV1VoicesVoiceIdEditPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditVoiceV1VoicesVoiceIdEditPostResponse, error)

	// DeleteSampleV1VoicesVoiceIdSamplesSampleIdDelete request
	DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteWithResponse(ctx context.Context, voiceId string, sampleId string, params *DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteParams, reqEditors ...RequestEditorFn) (*DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteResponse, error)

	// GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet request
	GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetWithResponse(ctx context.Context, voiceId string, sampleId string, params *GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetParams, reqEditors ...RequestEditorFn) (*GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetResponse, error)

	// GetVoiceSettingsV1VoicesVoiceIdSettingsGet request
	GetVoiceSettingsV1VoicesVoiceIdSettingsGetWithResponse(ctx context.Context, voiceId string, params *GetVoiceSettingsV1VoicesVoiceIdSettingsGetParams, reqEditors ...RequestEditorFn) (*GetVoiceSettingsV1VoicesVoiceIdSettingsGetResponse, error)

	// EditVoiceSettingsV1VoicesVoiceIdSettingsEditPost request with any body
	EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostWithBodyWithResponse(ctx context.Context, voiceId string, params *EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse, error)

	EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostWithResponse(ctx context.Context, voiceId string, params *EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostParams, body EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostJSONRequestBody, reqEditors ...RequestEditorFn) (*EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse, error)
}

type GetGeneratedItemsV1HistoryGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetHistoryResponseModel
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetGeneratedItemsV1HistoryGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeneratedItemsV1HistoryGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadHistoryItemsV1HistoryDownloadPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DownloadHistoryItemsV1HistoryDownloadPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadHistoryItemsV1HistoryDownloadPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHistoryItemV1HistoryHistoryItemIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteHistoryItemV1HistoryHistoryItemIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHistoryItemV1HistoryHistoryItemIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHistoryItemByIDV1HistoryHistoryItemIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistoryItemResponseModel
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetHistoryItemByIDV1HistoryHistoryItemIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHistoryItemByIDV1HistoryHistoryItemIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModelsV1ModelsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ModelResponseModel
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetModelsV1ModelsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModelsV1ModelsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TextToSpeechV1TextToSpeechVoiceIdPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r TextToSpeechV1TextToSpeechVoiceIdPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TextToSpeechV1TextToSpeechVoiceIdPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TextToSpeechV1TextToSpeechVoiceIdStreamPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r TextToSpeechV1TextToSpeechVoiceIdStreamPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TextToSpeechV1TextToSpeechVoiceIdStreamPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserInfoV1UserGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponseModel
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetUserInfoV1UserGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInfoV1UserGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSubscriptionInfoV1UserSubscriptionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExtendedSubscriptionResponseModel
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetUserSubscriptionInfoV1UserSubscriptionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSubscriptionInfoV1UserSubscriptionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoicesV1VoicesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetVoicesResponseModel
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetVoicesV1VoicesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoicesV1VoicesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddVoiceV1VoicesAddPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddVoiceResponseModel
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddVoiceV1VoicesAddPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddVoiceV1VoicesAddPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VoiceSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVoiceV1VoicesVoiceIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteVoiceV1VoicesVoiceIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVoiceV1VoicesVoiceIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoiceV1VoicesVoiceIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VoiceResponseModel
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetVoiceV1VoicesVoiceIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoiceV1VoicesVoiceIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditVoiceV1VoicesVoiceIdEditPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r EditVoiceV1VoicesVoiceIdEditPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditVoiceV1VoicesVoiceIdEditPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoiceSettingsV1VoicesVoiceIdSettingsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VoiceSettingsResponseModel
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetVoiceSettingsV1VoicesVoiceIdSettingsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoiceSettingsV1VoicesVoiceIdSettingsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetGeneratedItemsV1HistoryGetWithResponse request returning *GetGeneratedItemsV1HistoryGetResponse
func (c *ClientWithResponses) GetGeneratedItemsV1HistoryGetWithResponse(ctx context.Context, params *GetGeneratedItemsV1HistoryGetParams, reqEditors ...RequestEditorFn) (*GetGeneratedItemsV1HistoryGetResponse, error) {
	rsp, err := c.GetGeneratedItemsV1HistoryGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeneratedItemsV1HistoryGetResponse(rsp)
}

// DownloadHistoryItemsV1HistoryDownloadPostWithBodyWithResponse request with arbitrary body returning *DownloadHistoryItemsV1HistoryDownloadPostResponse
func (c *ClientWithResponses) DownloadHistoryItemsV1HistoryDownloadPostWithBodyWithResponse(ctx context.Context, params *DownloadHistoryItemsV1HistoryDownloadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DownloadHistoryItemsV1HistoryDownloadPostResponse, error) {
	rsp, err := c.DownloadHistoryItemsV1HistoryDownloadPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadHistoryItemsV1HistoryDownloadPostResponse(rsp)
}

func (c *ClientWithResponses) DownloadHistoryItemsV1HistoryDownloadPostWithResponse(ctx context.Context, params *DownloadHistoryItemsV1HistoryDownloadPostParams, body DownloadHistoryItemsV1HistoryDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*DownloadHistoryItemsV1HistoryDownloadPostResponse, error) {
	rsp, err := c.DownloadHistoryItemsV1HistoryDownloadPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadHistoryItemsV1HistoryDownloadPostResponse(rsp)
}

// DeleteHistoryItemV1HistoryHistoryItemIdDeleteWithResponse request returning *DeleteHistoryItemV1HistoryHistoryItemIdDeleteResponse
func (c *ClientWithResponses) DeleteHistoryItemV1HistoryHistoryItemIdDeleteWithResponse(ctx context.Context, historyItemId string, params *DeleteHistoryItemV1HistoryHistoryItemIdDeleteParams, reqEditors ...RequestEditorFn) (*DeleteHistoryItemV1HistoryHistoryItemIdDeleteResponse, error) {
	rsp, err := c.DeleteHistoryItemV1HistoryHistoryItemIdDelete(ctx, historyItemId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHistoryItemV1HistoryHistoryItemIdDeleteResponse(rsp)
}

// GetHistoryItemByIDV1HistoryHistoryItemIdGetWithResponse request returning *GetHistoryItemByIDV1HistoryHistoryItemIdGetResponse
func (c *ClientWithResponses) GetHistoryItemByIDV1HistoryHistoryItemIdGetWithResponse(ctx context.Context, historyItemId string, params *GetHistoryItemByIDV1HistoryHistoryItemIdGetParams, reqEditors ...RequestEditorFn) (*GetHistoryItemByIDV1HistoryHistoryItemIdGetResponse, error) {
	rsp, err := c.GetHistoryItemByIDV1HistoryHistoryItemIdGet(ctx, historyItemId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHistoryItemByIDV1HistoryHistoryItemIdGetResponse(rsp)
}

// GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetWithResponse request returning *GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse
func (c *ClientWithResponses) GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetWithResponse(ctx context.Context, historyItemId string, params *GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetParams, reqEditors ...RequestEditorFn) (*GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse, error) {
	rsp, err := c.GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGet(ctx, historyItemId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse(rsp)
}

// GetModelsV1ModelsGetWithResponse request returning *GetModelsV1ModelsGetResponse
func (c *ClientWithResponses) GetModelsV1ModelsGetWithResponse(ctx context.Context, params *GetModelsV1ModelsGetParams, reqEditors ...RequestEditorFn) (*GetModelsV1ModelsGetResponse, error) {
	rsp, err := c.GetModelsV1ModelsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModelsV1ModelsGetResponse(rsp)
}

// TextToSpeechV1TextToSpeechVoiceIdPostWithBodyWithResponse request with arbitrary body returning *TextToSpeechV1TextToSpeechVoiceIdPostResponse
func (c *ClientWithResponses) TextToSpeechV1TextToSpeechVoiceIdPostWithBodyWithResponse(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TextToSpeechV1TextToSpeechVoiceIdPostResponse, error) {
	rsp, err := c.TextToSpeechV1TextToSpeechVoiceIdPostWithBody(ctx, voiceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTextToSpeechV1TextToSpeechVoiceIdPostResponse(rsp)
}

func (c *ClientWithResponses) TextToSpeechV1TextToSpeechVoiceIdPostWithResponse(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdPostParams, body TextToSpeechV1TextToSpeechVoiceIdPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TextToSpeechV1TextToSpeechVoiceIdPostResponse, error) {
	rsp, err := c.TextToSpeechV1TextToSpeechVoiceIdPost(ctx, voiceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTextToSpeechV1TextToSpeechVoiceIdPostResponse(rsp)
}

// TextToSpeechV1TextToSpeechVoiceIdStreamPostWithBodyWithResponse request with arbitrary body returning *TextToSpeechV1TextToSpeechVoiceIdStreamPostResponse
func (c *ClientWithResponses) TextToSpeechV1TextToSpeechVoiceIdStreamPostWithBodyWithResponse(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdStreamPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TextToSpeechV1TextToSpeechVoiceIdStreamPostResponse, error) {
	rsp, err := c.TextToSpeechV1TextToSpeechVoiceIdStreamPostWithBody(ctx, voiceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTextToSpeechV1TextToSpeechVoiceIdStreamPostResponse(rsp)
}

func (c *ClientWithResponses) TextToSpeechV1TextToSpeechVoiceIdStreamPostWithResponse(ctx context.Context, voiceId string, params *TextToSpeechV1TextToSpeechVoiceIdStreamPostParams, body TextToSpeechV1TextToSpeechVoiceIdStreamPostJSONRequestBody, reqEditors ...RequestEditorFn) (*TextToSpeechV1TextToSpeechVoiceIdStreamPostResponse, error) {
	rsp, err := c.TextToSpeechV1TextToSpeechVoiceIdStreamPost(ctx, voiceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTextToSpeechV1TextToSpeechVoiceIdStreamPostResponse(rsp)
}

// GetUserInfoV1UserGetWithResponse request returning *GetUserInfoV1UserGetResponse
func (c *ClientWithResponses) GetUserInfoV1UserGetWithResponse(ctx context.Context, params *GetUserInfoV1UserGetParams, reqEditors ...RequestEditorFn) (*GetUserInfoV1UserGetResponse, error) {
	rsp, err := c.GetUserInfoV1UserGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInfoV1UserGetResponse(rsp)
}

// GetUserSubscriptionInfoV1UserSubscriptionGetWithResponse request returning *GetUserSubscriptionInfoV1UserSubscriptionGetResponse
func (c *ClientWithResponses) GetUserSubscriptionInfoV1UserSubscriptionGetWithResponse(ctx context.Context, params *GetUserSubscriptionInfoV1UserSubscriptionGetParams, reqEditors ...RequestEditorFn) (*GetUserSubscriptionInfoV1UserSubscriptionGetResponse, error) {
	rsp, err := c.GetUserSubscriptionInfoV1UserSubscriptionGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSubscriptionInfoV1UserSubscriptionGetResponse(rsp)
}

// GetVoicesV1VoicesGetWithResponse request returning *GetVoicesV1VoicesGetResponse
func (c *ClientWithResponses) GetVoicesV1VoicesGetWithResponse(ctx context.Context, params *GetVoicesV1VoicesGetParams, reqEditors ...RequestEditorFn) (*GetVoicesV1VoicesGetResponse, error) {
	rsp, err := c.GetVoicesV1VoicesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVoicesV1VoicesGetResponse(rsp)
}

// AddVoiceV1VoicesAddPostWithBodyWithResponse request with arbitrary body returning *AddVoiceV1VoicesAddPostResponse
func (c *ClientWithResponses) AddVoiceV1VoicesAddPostWithBodyWithResponse(ctx context.Context, params *AddVoiceV1VoicesAddPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVoiceV1VoicesAddPostResponse, error) {
	rsp, err := c.AddVoiceV1VoicesAddPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVoiceV1VoicesAddPostResponse(rsp)
}

// GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetWithResponse request returning *GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetResponse
func (c *ClientWithResponses) GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetResponse, error) {
	rsp, err := c.GetDefaultVoiceSettingsV1VoicesSettingsDefaultGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultVoiceSettingsV1VoicesSettingsDefaultGetResponse(rsp)
}

// DeleteVoiceV1VoicesVoiceIdDeleteWithResponse request returning *DeleteVoiceV1VoicesVoiceIdDeleteResponse
func (c *ClientWithResponses) DeleteVoiceV1VoicesVoiceIdDeleteWithResponse(ctx context.Context, voiceId string, params *DeleteVoiceV1VoicesVoiceIdDeleteParams, reqEditors ...RequestEditorFn) (*DeleteVoiceV1VoicesVoiceIdDeleteResponse, error) {
	rsp, err := c.DeleteVoiceV1VoicesVoiceIdDelete(ctx, voiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVoiceV1VoicesVoiceIdDeleteResponse(rsp)
}

// GetVoiceV1VoicesVoiceIdGetWithResponse request returning *GetVoiceV1VoicesVoiceIdGetResponse
func (c *ClientWithResponses) GetVoiceV1VoicesVoiceIdGetWithResponse(ctx context.Context, voiceId string, params *GetVoiceV1VoicesVoiceIdGetParams, reqEditors ...RequestEditorFn) (*GetVoiceV1VoicesVoiceIdGetResponse, error) {
	rsp, err := c.GetVoiceV1VoicesVoiceIdGet(ctx, voiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVoiceV1VoicesVoiceIdGetResponse(rsp)
}

// EditVoiceV1VoicesVoiceIdEditPostWithBodyWithResponse request with arbitrary body returning *EditVoiceV1VoicesVoiceIdEditPostResponse
func (c *ClientWithResponses) EditVoiceV1VoicesVoiceIdEditPostWithBodyWithResponse(ctx context.Context, voiceId string, params *EditVoiceV1VoicesVoiceIdEditPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditVoiceV1VoicesVoiceIdEditPostResponse, error) {
	rsp, err := c.EditVoiceV1VoicesVoiceIdEditPostWithBody(ctx, voiceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditVoiceV1VoicesVoiceIdEditPostResponse(rsp)
}

// DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteWithResponse request returning *DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteResponse
func (c *ClientWithResponses) DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteWithResponse(ctx context.Context, voiceId string, sampleId string, params *DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteParams, reqEditors ...RequestEditorFn) (*DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteResponse, error) {
	rsp, err := c.DeleteSampleV1VoicesVoiceIdSamplesSampleIdDelete(ctx, voiceId, sampleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteResponse(rsp)
}

// GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetWithResponse request returning *GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetResponse
func (c *ClientWithResponses) GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetWithResponse(ctx context.Context, voiceId string, sampleId string, params *GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetParams, reqEditors ...RequestEditorFn) (*GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetResponse, error) {
	rsp, err := c.GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGet(ctx, voiceId, sampleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetResponse(rsp)
}

// GetVoiceSettingsV1VoicesVoiceIdSettingsGetWithResponse request returning *GetVoiceSettingsV1VoicesVoiceIdSettingsGetResponse
func (c *ClientWithResponses) GetVoiceSettingsV1VoicesVoiceIdSettingsGetWithResponse(ctx context.Context, voiceId string, params *GetVoiceSettingsV1VoicesVoiceIdSettingsGetParams, reqEditors ...RequestEditorFn) (*GetVoiceSettingsV1VoicesVoiceIdSettingsGetResponse, error) {
	rsp, err := c.GetVoiceSettingsV1VoicesVoiceIdSettingsGet(ctx, voiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVoiceSettingsV1VoicesVoiceIdSettingsGetResponse(rsp)
}

// EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostWithBodyWithResponse request with arbitrary body returning *EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse
func (c *ClientWithResponses) EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostWithBodyWithResponse(ctx context.Context, voiceId string, params *EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse, error) {
	rsp, err := c.EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostWithBody(ctx, voiceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse(rsp)
}

func (c *ClientWithResponses) EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostWithResponse(ctx context.Context, voiceId string, params *EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostParams, body EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostJSONRequestBody, reqEditors ...RequestEditorFn) (*EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse, error) {
	rsp, err := c.EditVoiceSettingsV1VoicesVoiceIdSettingsEditPost(ctx, voiceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse(rsp)
}

// ParseGetGeneratedItemsV1HistoryGetResponse parses an HTTP response from a GetGeneratedItemsV1HistoryGetWithResponse call
func ParseGetGeneratedItemsV1HistoryGetResponse(rsp *http.Response) (*GetGeneratedItemsV1HistoryGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeneratedItemsV1HistoryGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetHistoryResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDownloadHistoryItemsV1HistoryDownloadPostResponse parses an HTTP response from a DownloadHistoryItemsV1HistoryDownloadPostWithResponse call
func ParseDownloadHistoryItemsV1HistoryDownloadPostResponse(rsp *http.Response) (*DownloadHistoryItemsV1HistoryDownloadPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadHistoryItemsV1HistoryDownloadPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteHistoryItemV1HistoryHistoryItemIdDeleteResponse parses an HTTP response from a DeleteHistoryItemV1HistoryHistoryItemIdDeleteWithResponse call
func ParseDeleteHistoryItemV1HistoryHistoryItemIdDeleteResponse(rsp *http.Response) (*DeleteHistoryItemV1HistoryHistoryItemIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHistoryItemV1HistoryHistoryItemIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetHistoryItemByIDV1HistoryHistoryItemIdGetResponse parses an HTTP response from a GetHistoryItemByIDV1HistoryHistoryItemIdGetWithResponse call
func ParseGetHistoryItemByIDV1HistoryHistoryItemIdGetResponse(rsp *http.Response) (*GetHistoryItemByIDV1HistoryHistoryItemIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHistoryItemByIDV1HistoryHistoryItemIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistoryItemResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse parses an HTTP response from a GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetWithResponse call
func ParseGetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse(rsp *http.Response) (*GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetModelsV1ModelsGetResponse parses an HTTP response from a GetModelsV1ModelsGetWithResponse call
func ParseGetModelsV1ModelsGetResponse(rsp *http.Response) (*GetModelsV1ModelsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModelsV1ModelsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ModelResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTextToSpeechV1TextToSpeechVoiceIdPostResponse parses an HTTP response from a TextToSpeechV1TextToSpeechVoiceIdPostWithResponse call
func ParseTextToSpeechV1TextToSpeechVoiceIdPostResponse(rsp *http.Response) (*TextToSpeechV1TextToSpeechVoiceIdPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TextToSpeechV1TextToSpeechVoiceIdPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTextToSpeechV1TextToSpeechVoiceIdStreamPostResponse parses an HTTP response from a TextToSpeechV1TextToSpeechVoiceIdStreamPostWithResponse call
func ParseTextToSpeechV1TextToSpeechVoiceIdStreamPostResponse(rsp *http.Response) (*TextToSpeechV1TextToSpeechVoiceIdStreamPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TextToSpeechV1TextToSpeechVoiceIdStreamPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetUserInfoV1UserGetResponse parses an HTTP response from a GetUserInfoV1UserGetWithResponse call
func ParseGetUserInfoV1UserGetResponse(rsp *http.Response) (*GetUserInfoV1UserGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInfoV1UserGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetUserSubscriptionInfoV1UserSubscriptionGetResponse parses an HTTP response from a GetUserSubscriptionInfoV1UserSubscriptionGetWithResponse call
func ParseGetUserSubscriptionInfoV1UserSubscriptionGetResponse(rsp *http.Response) (*GetUserSubscriptionInfoV1UserSubscriptionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSubscriptionInfoV1UserSubscriptionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExtendedSubscriptionResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetVoicesV1VoicesGetResponse parses an HTTP response from a GetVoicesV1VoicesGetWithResponse call
func ParseGetVoicesV1VoicesGetResponse(rsp *http.Response) (*GetVoicesV1VoicesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVoicesV1VoicesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetVoicesResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddVoiceV1VoicesAddPostResponse parses an HTTP response from a AddVoiceV1VoicesAddPostWithResponse call
func ParseAddVoiceV1VoicesAddPostResponse(rsp *http.Response) (*AddVoiceV1VoicesAddPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddVoiceV1VoicesAddPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddVoiceResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetDefaultVoiceSettingsV1VoicesSettingsDefaultGetResponse parses an HTTP response from a GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetWithResponse call
func ParseGetDefaultVoiceSettingsV1VoicesSettingsDefaultGetResponse(rsp *http.Response) (*GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultVoiceSettingsV1VoicesSettingsDefaultGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VoiceSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteVoiceV1VoicesVoiceIdDeleteResponse parses an HTTP response from a DeleteVoiceV1VoicesVoiceIdDeleteWithResponse call
func ParseDeleteVoiceV1VoicesVoiceIdDeleteResponse(rsp *http.Response) (*DeleteVoiceV1VoicesVoiceIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVoiceV1VoicesVoiceIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetVoiceV1VoicesVoiceIdGetResponse parses an HTTP response from a GetVoiceV1VoicesVoiceIdGetWithResponse call
func ParseGetVoiceV1VoicesVoiceIdGetResponse(rsp *http.Response) (*GetVoiceV1VoicesVoiceIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVoiceV1VoicesVoiceIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VoiceResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseEditVoiceV1VoicesVoiceIdEditPostResponse parses an HTTP response from a EditVoiceV1VoicesVoiceIdEditPostWithResponse call
func ParseEditVoiceV1VoicesVoiceIdEditPostResponse(rsp *http.Response) (*EditVoiceV1VoicesVoiceIdEditPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditVoiceV1VoicesVoiceIdEditPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteResponse parses an HTTP response from a DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteWithResponse call
func ParseDeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteResponse(rsp *http.Response) (*DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetResponse parses an HTTP response from a GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetWithResponse call
func ParseGetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetResponse(rsp *http.Response) (*GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetVoiceSettingsV1VoicesVoiceIdSettingsGetResponse parses an HTTP response from a GetVoiceSettingsV1VoicesVoiceIdSettingsGetWithResponse call
func ParseGetVoiceSettingsV1VoicesVoiceIdSettingsGetResponse(rsp *http.Response) (*GetVoiceSettingsV1VoicesVoiceIdSettingsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVoiceSettingsV1VoicesVoiceIdSettingsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VoiceSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse parses an HTTP response from a EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostWithResponse call
func ParseEditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse(rsp *http.Response) (*EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
